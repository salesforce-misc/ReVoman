{
	"info": {
		"_postman_id": "b5987ec5-e3ca-420f-b0eb-61fa28b1e62d",
		"name": "ReVoman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23827434"
	},
	"item": [
		{
			"name": "Login as SysAdmin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = xml2Json(responseBody);",
							"var sessionId = jsonData['soapenv:Envelope']['soapenv:Body'].loginResponse.result.sessionId",
							"pm.environment.set(\"accessToken\", sessionId);",
							"var adminUserId = jsonData['soapenv:Envelope']['soapenv:Body'].loginResponse.result.userId",
							"pm.environment.set(\"adminUserId\", adminUserId)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true,
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/xml"
					},
					{
						"key": "SOAPAction",
						"value": "login"
					},
					{
						"key": "charset",
						"value": "UTF-8",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "text/xml",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <env:Body>\n    <n1:login xmlns:n1=\"urn:partner.soap.sforce.com\">\n      <n1:username><![CDATA[{{username}}]]></n1:username>\n      <n1:password><![CDATA[{{password}}]]></n1:password>\n    </n1:login>\n  </env:Body>\n</env:Envelope>"
				},
				"url": {
					"raw": "{{baseUrl}}/services/Soap/u/{{version}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"services",
						"Soap",
						"u",
						"{{version}}"
					]
				},
				"description": "Login to Salesforce"
			},
			"response": []
		},
		{
			"name": "StdPermSetGroup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"if (jsonData.records[0] != null) {",
							"  jsonData.records.forEach(function (record) {",
							"    var profileName = record.DeveloperName;",
							"    if (profileName === 'SubscriptionManagementSalesOperationsRep') {",
							"      pm.environment.set(\"salesOpsRepPsgId\", record.Id);",
							"    } else if (profileName === 'SubscriptionManagementTaxAdmin') {",
							"      pm.environment.set(\"taxAdminPsgId\", record.Id);",
							"    } else if (profileName === 'SubscriptionManagementBillingAdmin') {",
							"      pm.environment.set(\"billingAdminPsgId\", record.Id);",
							"    }",
							"  });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/services/data/v{{version}}/query/?q=SELECT Id, DeveloperName FROM PermissionSetGroup where DeveloperName in ('SubscriptionManagementBillingAdmin', 'SubscriptionManagementBillingOperations', 'SubscriptionManagementBuyerIntegrationUser', 'SubscriptionManagementCreditMemoAdjustmentsOperations', 'SubscriptionManagementPaymentAdministrator', 'SubscriptionManagementPaymentOperations', 'SubscriptionManagementProductAndPricingAdmin', 'SubscriptionManagementSalesOperationsRep', 'SubscriptionManagementTaxAdmin')",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"services",
						"data",
						"v{{version}}",
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id, DeveloperName FROM PermissionSetGroup where DeveloperName in ('SubscriptionManagementBillingAdmin', 'SubscriptionManagementBillingOperations', 'SubscriptionManagementBuyerIntegrationUser', 'SubscriptionManagementCreditMemoAdjustmentsOperations', 'SubscriptionManagementPaymentAdministrator', 'SubscriptionManagementPaymentOperations', 'SubscriptionManagementProductAndPricingAdmin', 'SubscriptionManagementSalesOperationsRep', 'SubscriptionManagementTaxAdmin')"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Standard User Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"if (jsonData.records[0]!=null) {",
							"    pm.environment.set(\"standardUserProfileId\", jsonData.records[0].Id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/services/data/v{{version}}/query/?q=SELECT Id FROM Profile where Name = 'Standard User'",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"services",
						"data",
						"v{{version}}",
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT Id FROM Profile where Name = 'Standard User'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "SalesOpsRepUser",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"jsonData.compositeResponse.forEach(function(response) {",
							"    var referenceId = response.referenceId;",
							"    if (referenceId === \"refUser\") {",
							"        pm.environment.set(\"salesOpsRepUserId\", response.body.id);",
							"    } ",
							"});    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"POST\",\n            \"url\": \"/services/data/v{{version}}/sobjects/User\",\n            \"referenceId\": \"refUser\",\n            \"body\": {\n                \"Username\": \"{{salesOpsRepUsername}}\",\n                \"Alias\": \"salesOps\",\n                \"ProfileId\": \"{{standardUserProfileId}}\",\n                \"Email\": \"gopalakshintala@gmail.com\",\n                \"EmailEncodingKey\": \"ISO-8859-1\",\n                \"LastName\": \"SalesOpsRepUser\",\n                \"LanguageLocaleKey\": \"en_US\",\n                \"LocaleSidKey\": \"en_US\",\n                \"TimeZoneSidKey\": \"Asia/Kolkata\"\n            }\n        },\n        {\n            \"method\": \"POST\",\n            \"url\": \"/services/data/v{{version}}/sobjects/PermissionSetAssignment/\",\n            \"referenceId\": \"salesOpsRepPsgAssignment\",\n            \"body\": {\n                \"AssigneeId\": \"@{refUser.id}\",\n                \"PermissionSetGroupId\": \"{{salesOpsRepPsgId}}\"\n            }\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/services/data/v{{version}}/composite",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"services",
						"data",
						"v{{version}}",
						"composite"
					]
				}
			},
			"response": []
		},
		{
			"name": "TaxAdminUser",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"jsonData.compositeResponse.forEach(function(response){",
							"    var referenceId = response.referenceId;",
							"    if (referenceId === \"refUser\") {",
							"        pm.environment.set(\"taxAdminUserId\", response.body.id);",
							"    } ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"POST\",\n            \"url\": \"/services/data/v{{version}}/sobjects/User\",\n            \"referenceId\": \"refUser\",\n            \"body\": {\n                \"Username\": \"{{taxAdminUsername}}\",\n                \"ProfileId\": \"{{standardUserProfileId}}\",\n                \"Alias\": \"taxAdmin\",\n                \"Email\": \"{{$randomEmail}}\",\n                \"EmailEncodingKey\": \"ISO-8859-1\",\n                \"LastName\": \"TaxAdmin\",\n                \"LanguageLocaleKey\": \"en_US\",\n                \"LocaleSidKey\": \"en_US\",\n                \"TimeZoneSidKey\": \"America/Los_Angeles\"\n            }\n        },\n        {\n            \"method\": \"POST\",\n            \"url\": \"/services/data/v{{version}}/sobjects/PermissionSetAssignment/\",\n            \"referenceId\": \"taxAdminPsgAssignment\",\n            \"body\": {\n                \"AssigneeId\": \"@{refUser.id}\",\n                \"PermissionSetGroupId\": \"{{taxAdminPsgId}}\"\n            }\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/services/data/v{{version}}/composite",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"services",
						"data",
						"v{{version}}",
						"composite"
					]
				}
			},
			"response": []
		},
		{
			"name": "Password Reset Composite API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"allOrNone\": false,\n    \"compositeRequest\": [\n        {\n            \"method\": \"POST\",\n            \"url\": \"/services/data/v{{version}}/sobjects/User/{{salesOpsRepUserId}}/password\",\n            \"referenceId\": \"salesOpsRepNewPassword\",\n            \"body\": {\n                \"NewPassword\": \"{{commonUserPassword}}\"\n            }\n        },\n        {\n            \"method\": \"POST\",\n            \"url\": \"/services/data/v{{version}}/sobjects/User/{{taxAdminUserId}}/password\",\n            \"referenceId\": \"taxAdminNewPassword\",\n            \"body\": {\n                \"NewPassword\": \"{{commonUserPassword}}\"\n            }\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/services/data/v{{version}}/composite",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"services",
						"data",
						"v{{version}}",
						"composite"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login as TaxAdmin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;",
							"",
							"if(statusCode == 200){",
							"    const result = xml2Json(pm.response.text())[\"soapenv:Envelope\"][\"soapenv:Body\"].loginResponse.result;",
							"    const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
							"    context.set(\"accessToken\", result.sessionId);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true,
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/xml"
					},
					{
						"key": "SOAPAction",
						"value": "login"
					},
					{
						"key": "charset",
						"value": "UTF-8",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "text/xml",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <env:Body>\n    <n1:login xmlns:n1=\"urn:partner.soap.sforce.com\">\n      <n1:username><![CDATA[{{taxAdminUserName}}]]></n1:username>\n      <n1:password><![CDATA[{{commonUserPassword}}]]></n1:password>\n    </n1:login>\n  </env:Body>\n</env:Envelope>"
				},
				"url": {
					"raw": "{{baseUrl}}/services/Soap/u/{{version}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"services",
						"Soap",
						"u",
						"{{version}}"
					]
				},
				"description": "Login to Salesforce"
			},
			"response": []
		},
		{
			"name": "MockAdapter Apex Class",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"if (jsonData.records.length > 0) {",
							"  pm.environment.set(\"mockTaxAdapterId\", jsonData.records[0].Id);",
							"} else {",
							"    console.log(\"No ApexClass with name MockAdapter found!\")",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/services/data/v{{version}}/query/?q=SELECT+Id,Name,Status,ApiVersion,Body+FROM+ApexClass+WHERE+Name='MockAdapter'",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"services",
						"data",
						"v{{version}}",
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT+Id,Name,Status,ApiVersion,Body+FROM+ApexClass+WHERE+Name='MockAdapter'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MockAdapter Apex Class",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.unset(\"mockTaxAdapterId\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/services/data/v{{version}}/sobjects/ApexClass/{{mockTaxAdapterId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"services",
						"data",
						"v{{version}}",
						"sobjects",
						"ApexClass",
						"{{mockTaxAdapterId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "MockAdapter APEX class",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.environment.set(\"mockTaxAdapterId\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Sforce-Call-Options",
						"value": "client=SfdcInternalQA/..."
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"attributes\": {\n        \"type\": \"ApexClass\",\n        \"referenceId\": \"ApexClassReferenceId\"\n    },\n    \"ApiVersion\": \"{{version}}\",\n    \"Status\": \"Active\",\n    \"Body\": \"global virtual class MockAdapter implements commercetax.TaxEngineAdapter {\\n\\n    global commercetax.TaxEngineResponse processRequest(commercetax.TaxEngineContext taxEngineContext) {\\n        commercetax.RequestType requestType = taxEngineContext.getRequestType();\\n        commercetax.CalculateTaxRequest request = (commercetax.CalculateTaxRequest)taxEngineContext.getRequest();\\n        if(request.documentCode == null) {\\n            return new commercetax.ErrorResponse(commercetax.resultcode.TaxEngineError, '404', 'documentCode  is mandatory');\\n        }\\n        if(request.documentCode == 'TaxEngineError') {\\n            return new commercetax.ErrorResponse(commercetax.resultcode.TaxEngineError, '504', 'documentCode  - not supported');\\n        }\\n        if(request.documentCode == 'simulateUnhandledExceptionInAdapter') {\\n            Integer foo = 5/0 ;\\n        }\\n        if(request.documentCode == 'simulateValidationFailureInAdapter') {\\n            return new commercetax.ErrorResponse(commercetax.resultcode.TaxEngineError, '400', 'validations for documentCode failed in adapter');\\n        }\\n        if(request.documentCode == 'simulateMalformedErrorInAdapter') {\\n                    return new commercetax.ErrorResponse(commercetax.resultcode.TaxEngineError, null, 'malformed adapter error response');\\n        }\\n        if(request.documentCode == 'simulateTaxEngineProcessFailure') {\\n            return new commercetax.ErrorResponse(commercetax.resultcode.TaxEngineError, '500', 'Tax Engine couldnt process your request');\\n        }\\n\\n        if(requestType == commercetax.RequestType.CalculateTax){\\n            commercetax.calculatetaxtype type = request.taxtype;\\n            String docCode='';\\n            if(request.DocumentCode == 'simulateEmptyDocumentCode')\\n                docCode = '';\\n            else if(request.DocumentCode != null)\\n                docCode =request.DocumentCode;             \\n            else if(request.ReferenceEntityId != null) docCode = request.ReferenceEntityId;\\n            else docCode =  String.valueOf(getRandomInteger(0,2147483647));\\n            commercetax.CalculateTaxResponse response = new commercetax.CalculateTaxResponse();\\n            if(request.isCommit == true) {\\n                response.setStatus(commercetax.TaxTransactionStatus.Committed);\\n            } else {\\n                response.setStatus(commercetax.TaxTransactionStatus.Uncommitted);\\n            }\\n            response.setDocumentCode(docCode);\\n            response.setReferenceDocumentCode(request.referenceDocumentCode);\\n            response.setTaxType(type);\\n            response.setStatusDescription('statusDescription');\\n            if(request.sellerDetails.code == 'testSellerCode') {\\n                response.setDescription('SellerCode fetched from TaxEngine entity');\\n            }\\n            else {\\n                response.setDescription('description');\\n            }\\n           response.setEffectiveDate(system.now());\\n           if(request.transactionDate == null) {\\n              response.setTransactionDate(system.now());\\n           } else {\\n              response.setTransactionDate(request.transactionDate);\\n           }\\n           if(request.taxTransactionType == null) {\\n               response.setTaxTransactionType(commercetax.TaxTransactionType.Debit);\\n           } else {\\n               response.setTaxTransactionType(request.taxTransactionType);\\n           }\\n\\n            if(request.currencyIsoCode == null || request.currencyIsoCode == '') {\\n               response.setCurrencyIsoCode('USD');\\n            } else {\\n               response.setCurrencyIsoCode(request.currencyIsoCode);\\n            }\\n            response.setReferenceEntityId(request.ReferenceEntityId);\\n            Double totalTax = 0.0;\\n            Double totalAmount = 0.0;\\n            List<commercetax.LineItemResponse> lineItemResponses = new List<commercetax.LineItemResponse>();\\n            for(Commercetax.TaxLineItemRequest lineItem : request.lineItems){\\n                commercetax.AddressesResponse addressesRes = new commercetax.AddressesResponse();\\n                if(request.DocumentCode == 'SetsNullForResponseWithoutException'){\\n\\t                addressesRes.setShipFrom(null);\\n\\t                addressesRes.setShipTO(null);\\n\\t                addressesRes.setSoldTo(null);\\n                }else{\\n\\t                commercetax.AddressResponse addRes = new commercetax.AddressResponse();\\n\\t                addRes.setLocationCode('locationCode');\\n\\t                addressesRes.setShipFrom(addRes);\\n\\t                addressesRes.setShipTO(addRes);\\n\\t                addressesRes.setSoldTo(addRes);\\n                }\\n                commercetax.LineItemResponse lineItemResponse = new commercetax.LineItemResponse();\\n                Double totalLineTax = 0;\\n                List<commercetax.TaxDetailsResponse> taxDetailsResponses = new List<commercetax.TaxDetailsResponse>();\\n                for(integer i =0;i<1;i++){\\n                    Integer rate  = 1;\\n                    Double taxableAmount = lineItem.amount;\\n                    commercetax.TaxDetailsResponse taxDetailsResponse = new commercetax.TaxDetailsResponse();\\n                    taxDetailsResponse.setRate(Double.valueOf(rate));\\n                    taxDetailsResponse.setTaxableAmount(taxableAmount);\\n                    Double tax = taxableAmount*rate;\\n                    totalLineTax+=tax;\\n                    taxDetailsResponse.setTax(taxableAmount*rate);\\n                    taxDetailsResponse.setExemptAmount(0);\\n                    taxDetailsResponse.setExemptReason('exemptReason');\\n                    taxDetailsResponse.setTaxRegionId('taxRegionId');\\n                    taxDetailsResponse.setTaxId(String.valueOf(getRandomInteger(0,2323233)));\\n                    taxDetailsResponse.setSerCode('serCode');\\n                    taxDetailsResponse.setTaxAuthorityTypeId('taxAuthorityTypeId');\\n                    if(request.DocumentCode == 'SetsNullForResponseWithoutException'){\\n\\t\\t\\t\\t\\t\\ttaxDetailsResponse.setImposition(null);\\t\\n\\t            \\t}else{\\n\\t                    commercetax.ImpositionResponse imposition = new commercetax.ImpositionResponse();\\n                        imposition.setSubType('subtype');\\n                        imposition.setType('type');\\n\\t\\t\\t\\t\\t\\ttaxDetailsResponse.setImposition(imposition);\\t            \\t\\n\\t\\t\\t\\t\\t}\\n\\t            \\t\\n                    if(request.DocumentCode == 'SetsNullForResponseWithoutException'){\\n\\t                \\ttaxDetailsResponse.setJurisdiction(null);\\n\\t            \\t}else{\\n\\t\\t            \\tcommercetax.JurisdictionResponse jurisdiction = new commercetax.JurisdictionResponse();\\n                        jurisdiction.setCountry('country');\\n                        jurisdiction.setRegion('region');\\n                        jurisdiction.setName('name');\\n                        jurisdiction.setStateAssignedNumber('stateAssignedNo');\\n                        jurisdiction.setId('id');\\n                        jurisdiction.setLevel('level');\\n                        taxDetailsResponse.setJurisdiction(jurisdiction);\\n\\t            \\t}\\n            \\t\\n                    taxDetailsResponses.add(taxDetailsResponse);\\n                }\\n                lineItemResponse.setTaxes(taxDetailsResponses);\\n                totalTax +=totalLineTax;\\n                totalAmount+=lineItem.amount;\\n                \\n                if(request.DocumentCode == 'SetsNullForResponseWithException'){\\n\\t                lineItemResponse.setAmountDetails(null);\\n            \\t}else{\\n\\t                commercetax.AmountDetailsResponse amountResponse = new commercetax.AmountDetailsResponse();\\n\\t                amountResponse.setTotalAmountWithTax(totalTax+totalAmount);\\n\\t                amountResponse.setExemptAmount(0);\\n\\t                amountResponse.setTotalAmount(totalAmount);\\n\\t                amountResponse.setTaxAmount(totalTax);\\n\\t                lineItemResponse.setAmountDetails(amountResponse);\\n\\t            }\\n                lineItemResponse.setEffectiveDate(system.now());\\n                lineItemResponse.setTaxCode(lineItem.taxCode);\\n                lineItemResponse.setProductCode(lineItem.ProductCode);\\n                lineItemResponse.setLineNumber(lineItem.linenumber);\\n                lineItemResponse.setIsTaxable(true);\\n                lineItemResponse.setQuantity(lineItem.quantity);\\n                if(request.DocumentCode == 'SetsNullForResponseWithoutException'){\\n\\t\\t\\t\\t\\tlineItemResponse.setAddresses(null);\\n            \\t}else{\\n            \\t\\tlineItemResponse.setAddresses(addressesRes);\\n                }\\n            \\tlineItemResponses.add(lineItemResponse);\\n            }\\n\\t\\t\\tif(request.DocumentCode == 'SetsNullForResponseWithException'){\\n\\t\\t\\t\\tlineItemResponses.add(null);\\n            }\\n\\t        if(request.documentCode == 'nolines') {\\n\\t            // logic to skip adding lines to response\\n\\t        } else {\\n\\t                response.setLineItems(lineItemResponses);\\n\\t        }\\n            if(request.DocumentCode == 'SetsNullForResponseWithException'){\\n            \\tresponse.setAmountDetails(null);\\n            }else{\\n            \\tcommercetax.AmountDetailsResponse headerAmountResponse = new commercetax.AmountDetailsResponse();\\n                headerAmountResponse.setTotalAmountWithTax(totalTax+totalAmount);\\n                headerAmountResponse.setExemptAmount(0);\\n                headerAmountResponse.setTotalAmount(totalAmount);\\n                headerAmountResponse.setTaxAmount(totalTax);\\n                response.setAmountDetails(headerAmountResponse);\\n\\t            }\\n            commercetax.AddressesResponse addressesRes = new commercetax.AddressesResponse();\\n            commercetax.AddressResponse addRes = new commercetax.AddressResponse();\\n            addRes.setLocationCode('locationCode');\\n            addressesRes.setShipFrom(addRes);\\n            addRes.setLocationCode('locationCode');\\n            addressesRes.setShipTO(addRes);\\n            addRes.setLocationCode('locationCode');\\n            addressesRes.setSoldTo(addRes);\\n            response.setAddresses(addressesRes);\\n            return response;\\n\\n        }\\n        else\\n            return null;\\n    }\\n\\n    public static Integer getRandomInteger(Integer min, Integer max)\\n    {\\n        return min + (Integer.valueOf(Math.random()) * (max - min));\\n    }\\n}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/services/data/v{{version}}/sobjects/ApexClass",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"services",
						"data",
						"v{{version}}",
						"sobjects",
						"ApexClass"
					]
				},
				"description": "Login to Salesforce"
			},
			"response": []
		},
		{
			"name": "TaxEngineProvider",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.environment.set(\"taxEngineProviderId\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"apexadapterid\":\"{{mockTaxAdapterId}}\", \n    \"developername\":\"{{$randomFirstName}}\",\n    \"masterlabel\":\"{{$randomLastName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/services/data/v{{version}}/sobjects/Taxengineprovider",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"services",
						"data",
						"v{{version}}",
						"sobjects",
						"Taxengineprovider"
					]
				}
			},
			"response": []
		},
		{
			"name": "NamedCredential",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.environment.set(\"namedCredentialId\", jsonData.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"FullName\": \"{{$randomUserName}}\",\n    \"Metadata\": {\n        \"allowMergeFieldsInBody\": \"false\",\n        \"allowMergeFieldsInHeader\": \"false\",\n        \"label\": \"Mock\",\n        \"endpoint\": \"https://mockendpoint.free.beeceptor.com\",\n        \"principalType\": \"NamedUser\",\n        \"protocol\": \"Password\",\n        \"username\": \"MockUsername\",\n        \"password\":\"MockPassword\",\n        \"generateAuthorizationHeader\": \"true\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/services/data/v{{version}}/tooling/sobjects/NamedCredential",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"services",
						"data",
						"v{{version}}",
						"tooling",
						"sobjects",
						"NamedCredential"
					]
				}
			},
			"response": []
		},
		{
			"name": "TaxEngine",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.environment.set(\"taxEngineId\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"taxEngineProviderId\": \"{{taxEngineProviderId}}\",\n    \"merchantcredentialid\": \"{{namedCredentialId}}\",\n    \"taxenginename\": \"{{$randomCompanyName}}\",\n    \"Status\": \"Active\",\n    \"sellercode\": \"Billing2\",\n    \"taxenginecity\": \"Irvine\",\n    \"taxenginecountry\": \"US\",\n    \"taxenginepostalcode\": \"92614\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/services/data/v{{version}}/sobjects/TaxEngine",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"services",
						"data",
						"v{{version}}",
						"sobjects",
						"TaxEngine"
					]
				}
			},
			"response": []
		},
		{
			"name": "TaxPolicy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.environment.set(\"taxPolicyId\", jsonData.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Sforce-Call-Options",
						"value": "client=SfdcInternalQA/...",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"Name\": \"My Tax Policy\",\n    \"Status\": \"Draft\",\n    \"TreatmentSelection\": \"Default\",\n    \"Description\": \"Test description\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/services/data/v{{version}}/sobjects/TaxPolicy",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"services",
						"data",
						"v{{version}}",
						"sobjects",
						"TaxPolicy"
					]
				}
			},
			"response": []
		},
		{
			"name": "TaxTreatment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.environment.set(\"taxTreatmentId\", jsonData.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"Name\": \"Test Tax Treatment\",\n    \"TaxPolicyId\": \"{{taxPolicyId}}\",\n    \"TaxEngineId\": \"{{taxEngineId}}\",\n    \"Description\": \"Test Tax Treatment\",\n    \"TaxCode\": \"PA020111\",\n    \"ProductCode\": \"Test123\",\n    \"IsTaxable\": true,\n    \"Status\": \"Active\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/services/data/v{{version}}/sobjects/TaxTreatment/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"services",
						"data",
						"v{{version}}",
						"sobjects",
						"TaxTreatment",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "StandardPriceBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.environment.set(\"standardPricebookId\", jsonData.records[0].Id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Sforce-Call-Options",
						"value": "client=SfdcInternalQA/...",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/services/data/v{{version}}/query/?q=SELECT+Id+FROM+Pricebook2+WHERE+IsStandard+=+true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"services",
						"data",
						"v{{version}}",
						"query",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "SELECT+Id+FROM+Pricebook2+WHERE+IsStandard+=+true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Login as SysAdmin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = xml2Json(responseBody);",
							"var sessionId = jsonData['soapenv:Envelope']['soapenv:Body'].loginResponse.result.sessionId",
							"pm.environment.set(\"accessToken\", sessionId);",
							"var adminUserId = jsonData['soapenv:Envelope']['soapenv:Body'].loginResponse.result.userId",
							"pm.environment.set(\"adminUserId\", adminUserId)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true,
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/xml"
					},
					{
						"key": "SOAPAction",
						"value": "login"
					},
					{
						"key": "charset",
						"value": "UTF-8",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "text/xml",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <env:Body>\n    <n1:login xmlns:n1=\"urn:partner.soap.sforce.com\">\n      <n1:username><![CDATA[{{adminUsername}}]]></n1:username>\n      <n1:password><![CDATA[{{adminPassword}}]]></n1:password>\n    </n1:login>\n  </env:Body>\n</env:Envelope>"
				},
				"url": {
					"raw": "{{baseUrl}}/services/Soap/u/{{version}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"services",
						"Soap",
						"u",
						"{{version}}"
					]
				},
				"description": "Login to Salesforce"
			},
			"response": []
		},
		{
			"name": "setup-graph (once)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData=JSON.parse(responseBody);",
							"for (var i = 0; i<jsonData.graphs[0].graphResponse.compositeResponse.length;i++) {",
							"    var compositeResponse = jsonData.graphs[0].graphResponse.compositeResponse[i]",
							"    var referenceId = compositeResponse.referenceId",
							"    if (referenceId != \"activatePaymentTerm\" && referenceId != \"activateBillingTreatment\") {",
							"        pm.environment.set(referenceId + \"Id\", compositeResponse.body.id);",
							"    }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"graphs\": [\n        {\n            \"graphId\": \"1\",\n            \"compositeRequest\": [\n                {\n                    \"url\": \"/services/data/v{{version}}/sobjects/Product2/\",\n                    \"body\": {\n                        \"Name\": \"Gopal Pro\",\n                        \"isActive\": true\n                    },\n                    \"method\": \"POST\",\n                    \"referenceId\": \"product\"\n                },\n                {\n                    \"url\": \"/services/data/v{{version}}/sobjects/PricebookEntry/\",\n                    \"body\": {\n                        \"Pricebook2Id\": \"{{standardPricebookId}}\",\n                        \"Product2Id\": \"@{product.id}\",\n                        \"UnitPrice\": \"27\",\n                        \"isActive\": true\n                    },\n                    \"method\": \"POST\",\n                    \"referenceId\": \"standardPricebookEntry\"\n                },\n                {\n                    \"url\": \"/services/data/v{{version}}/sobjects/Pricebook2/\",\n                    \"body\": {\n                        \"Name\": \"Gopal Pricebook2\",\n                        \"isActive\": true\n                    },\n                    \"method\": \"POST\",\n                    \"referenceId\": \"pricebook\"\n                },\n                {\n                    \"url\": \"/services/data/v{{version}}/sobjects/PricebookEntry/\",\n                    \"body\": {\n                        \"Pricebook2Id\": \"@{pricebook.id}\",\n                        \"Product2Id\": \"@{product.id}\",\n                        \"UnitPrice\": 27,\n                        \"isActive\": true\n                    },\n                    \"method\": \"POST\",\n                    \"referenceId\": \"pricebookEntry\"\n                },\n                {\n                    \"url\": \"/services/data/v{{version}}/sobjects/Account\",\n                    \"body\": {\n                        \"Name\": \"ReVoman\"\n                    },\n                    \"method\": \"POST\",\n                    \"referenceId\": \"account\"\n                },\n                {\n                    \"url\": \"/services/data/v{{version}}/sobjects/Contact\",\n                    \"body\": {\n                        \"AccountId\": \"@{account.id}\",\n                        \"FirstName\": \"ReVoman\",\n                        \"LastName\": \"Salesforce\"\n                    },\n                    \"method\": \"POST\",\n                    \"referenceId\": \"contact\"\n                },\n                {\n                    \"url\": \"/services/data/v{{version}}/sobjects/PaymentTerm\",\n                    \"body\": {\n                        \"Name\": \"My Term\",\n                        \"IsDefault\": false,\n                        \"Description\": \"My Term\",\n                        \"Status\": \"Draft\"\n                    },\n                    \"method\": \"POST\",\n                    \"referenceId\": \"paymentTerm\"\n                },\n                {\n                    \"url\": \"/services/data/v{{version}}/sobjects/PaymentTermItem\",\n                    \"body\": {\n                        \"Type\": \"Period-Based\",\n                        \"Period\": 30,\n                        \"PeriodUnit\": \"Days\",\n                        \"PaymentTermId\": \"@{paymentTerm.id}\",\n                        \"PaymentTimeframe\": \"Standard\"\n                    },\n                    \"method\": \"POST\",\n                    \"referenceId\": \"paymentTermItem\"\n                },\n                {\n                    \"url\": \"/services/data/v{{version}}/sobjects/PaymentTerm/@{paymentTerm.id}\",\n                    \"body\": {\n                        \"IsDefault\": true,\n                        \"Status\": \"Active\"\n                    },\n                    \"method\": \"PATCH\",\n                    \"referenceId\": \"activatePaymentTerm\"\n                },\n                {\n                    \"url\": \"/services/data/v{{version}}/sobjects/BillingTreatment/\",\n                    \"body\": {\n                        \"Name\": \"Gopal-BT\",\n                        \"Status\": \"Draft\",\n                        \"ExcludeFromBilling\": \"No\"\n                    },\n                    \"method\": \"POST\",\n                    \"referenceId\": \"billingTreatment\"\n                },\n                {\n                    \"url\": \"/services/data/v{{version}}/sobjects/BillingTreatmentItem/\",\n                    \"body\": {\n                        \"Name\": \"Gopal-BTI\",\n                        \"Status\": \"Active\",\n                        \"ProcessingOrder\": 1,\n                        \"Sequencing\": \"Manual\",\n                        \"BillingTreatmentId\": \"@{billingTreatment.id}\",\n                        \"Handling0Amount\": \"CreateInvoice\",\n                        \"Type\": \"FlatAmount\",\n                        \"FlatAmount\": 77,\n                        \"BillingType\": \"Advance\",\n                        \"Controller\": \"BillingScheduleGroup\"\n                    },\n                    \"method\": \"POST\",\n                    \"referenceId\": \"billingTreatmentItem\"\n                },\n                {\n                    \"url\": \"/services/data/v{{version}}/sobjects/BillingTreatment/@{billingTreatment.id}\",\n                    \"body\": {\n                        \"Status\": \"Active\"\n                    },\n                    \"method\": \"PATCH\",\n                    \"referenceId\": \"activateBillingTreatment\"\n                }\n            ]\n        }\n    ]\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/services/data/v{{version}}/composite/graph",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"services",
						"data",
						"v{{version}}",
						"composite",
						"graph"
					]
				}
			},
			"response": []
		},
		{
			"name": "order-orderItem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"jsonData = JSON.parse(responseBody);",
							"// console.log(jsonData.graphs[0].graphResponse.compositeResponse.length);",
							"for (var i = 0; i < jsonData.graphs[0].graphResponse.compositeResponse.length; i++) {",
							"  if (",
							"    jsonData.graphs[0].graphResponse.compositeResponse[i].referenceId !=",
							"    \"activeBillingTreatment\"",
							"  ) {",
							"    // console.log(jsonData.graphs[0].graphResponse.compositeResponse[i].referenceId +\"Id\",jsonData.graphs[0].graphResponse.compositeResponse[i].body.id);",
							"    pm.environment.set(",
							"      jsonData.graphs[0].graphResponse.compositeResponse[i].referenceId + \"Id\",",
							"      jsonData.graphs[0].graphResponse.compositeResponse[i].body.id",
							"    );",
							"  }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"graphs\": [\n        {\n            \"graphId\": \"1\",\n            \"compositeRequest\": [\n                {\n                    \"url\": \"/services/data/v{{version}}/sobjects/Order/\",\n                    \"body\": {\n                        \"AccountId\": \"{{accountId}}\",\n                        \"EffectiveDate\": \"2021-02-16T00:00:00+00:00\",\n                        \"Status\": \"Draft\",\n                        \"BillingCity\": \"hyd\",\n                        \"Pricebook2Id\": \"{{pricebookId}}\"\n                    },\n                    \"method\": \"POST\",\n                    \"referenceId\": \"order\"\n                },\n                {\n                    \"url\": \"/services/data/v{{version}}/sobjects/OrderItem/\",\n                    \"body\": {\n                        \"OrderId\": \"@{order.id}\",\n                        \"PricebookEntryId\": \"{{pricebookEntryId}}\",\n                        \"Quantity\": \"2\",\n                        \"UnitPrice\": \"10\"\n                    },\n                    \"method\": \"POST\",\n                    \"referenceId\": \"orderItem1\"\n                },\n                {\n                    \"url\": \"/services/data/v{{version}}/sobjects/OrderItem/\",\n                    \"body\": {\n                        \"OrderId\": \"@{order.id}\",\n                        \"PricebookEntryId\": \"{{pricebookEntryId}}\",\n                        \"Quantity\": \"1\",\n                        \"UnitPrice\": \"20\"\n                    },\n                    \"method\": \"POST\",\n                    \"referenceId\": \"orderItem2\"\n                },\n                {\n                    \"url\": \"/services/data/v{{version}}/sobjects/OrderItem/\",\n                    \"body\": {\n                        \"OrderId\": \"@{order.id}\",\n                        \"PricebookEntryId\": \"{{pricebookEntryId}}\",\n                        \"Quantity\": \"5\",\n                        \"UnitPrice\": \"30\"\n                    },\n                    \"method\": \"POST\",\n                    \"referenceId\": \"orderItem3\"\n                },\n                {\n                    \"url\": \"/services/data/v{{version}}/sobjects/OrderItem/\",\n                    \"body\": {\n                        \"OrderId\": \"@{order.id}\",\n                        \"PricebookEntryId\": \"{{pricebookEntryId}}\",\n                        \"Quantity\": \"7\",\n                        \"UnitPrice\": \"40\"\n                    },\n                    \"method\": \"POST\",\n                    \"referenceId\": \"orderItem4\"\n                }\n            ]\n        }\n    ]\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/services/data/v{{version}}/composite/graph",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"services",
						"data",
						"v{{version}}",
						"composite",
						"graph"
					]
				},
				"description": "# setup-graph (minimal)\n\n*   Order\n*   BillingTreatment\n*   BillingTreatmentItem\n*   BillingTreatment Activate\n*   OrderItem (4)"
			},
			"response": []
		},
		{
			"name": "billing-schedule",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Sforce-Call-Options",
						"value": "client=SfdcInternalQA/...",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"referenceItems\": [\n        {\n            \"unitPrice\": 10.0,\n            \"billingScheduleStartDate\": \"2019-01-01\",\n            \"amount\": 1000.0,\n            \"paymentTermId\": \"{{paymentTermId}}\",\n            \"quantity\": 5.0,\n            \"billingTerm\": 1,\n            \"billingMethod\": \"Evergreen\",\n            \"billDayOfMonth\": 1,\n            \"billingAccountId\": \"{{accountId}}\",\n            \"productName\": \"Test Product Name\",\n            \"referenceId\": \"\",\n            \"billingType\": \"Advance\",\n            \"billingTermUnit\": \"Month\",\n            \"taxTreatmentId\": \"{{taxTreatmentId}}\",\n            \"billingTreatmentId\": \"{{billingTreatmentId}}\",\n            \"billToContactId\": \"{{contactId}}\",\n            \"referenceItemId\": \"{{oneTimeOrderItemId}}\",\n            \"currencyIsoCode\": \"USD\"\n        }\n    ]\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/{{bsConnectUrl}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{bsConnectUrl}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
